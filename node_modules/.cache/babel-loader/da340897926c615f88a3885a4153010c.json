{"ast":null,"code":"import Drawflow from 'drawflow';\nimport { onMounted, h, getCurrentInstance, render, inject, ref } from 'vue';\nimport NodeNumber from './Nodes/NodeNumber';\nimport NodeAdd from './Nodes/NodeAdd.vue';\nimport NodePrint from './Nodes/NodePrint.vue';\nimport { callbackify } from 'util';\nexport default {\n  __name: 'Index',\n\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const editor = inject('editor');\n    const Vue = {\n      version: 3,\n      h,\n      render\n    };\n    const instance = getCurrentInstance();\n    let selectedNode = ref(0);\n    onMounted(() => {\n      const id = document.getElementById(\"drawflow\");\n      editor.value = new Drawflow(id, Vue, instance.appContext.app._context);\n      editor.value.start();\n      editor.value.reroute = true;\n      editor.value.on('connectionCreated', connection => connectionCreated(connection));\n      editor.value.on('connectionRemoved', connection => connectionRemoved(connection));\n      editor.value.on('nodeSelected', id => nodeSelected(id));\n      editor.value.on('nodeUnselected', nodeUnselected());\n      editor.value.registerNode('nodeNumber', NodeNumber, {\n        'editor': editor.value\n      }, {});\n      editor.value.registerNode('nodeAdd', NodeAdd, {\n        'editor': editor.value\n      }, {});\n      editor.value.registerNode('nodePrint', NodePrint, {\n        'editor': editor.value\n      }, {});\n      editor.value.addNode('number', 0, 1, 100, 100, 'number', {}, 'nodeNumber', 'vue');\n    });\n\n    const connectionCreated = connection => {\n      const inputNode = editor.value.getNodeFromId(connection.input_id);\n      const outputNode = editor.value.getNodeFromId(connection.output_id);\n      const input_class = connection.input_class;\n      const output = outputNode.data.output;\n      const obj = { ...inputNode.data\n      };\n      obj[input_class] = output;\n      output != undefined ? editor.value.updateNodeDataFromId(connection.input_id, obj) : {};\n    };\n\n    const connectionRemoved = connection => {\n      const obj = { ...editor.value.getNodeFromId(connection.input_id).data\n      };\n      const input_class = connection.input_class;\n      delete obj[input_class];\n      editor.value.updateNodeDataFromId(connection.input_id, obj);\n    };\n\n    const nodeSelected = id => {\n      selectedNode.value = id;\n    };\n\n    const nodeUnselected = () => {\n      callback(response);\n      console.log(selectedNode.value);\n    };\n\n    const __returned__ = {\n      editor,\n      Vue,\n      instance,\n      selectedNode,\n      connectionCreated,\n      connectionRemoved,\n      nodeSelected,\n      nodeUnselected,\n      Drawflow,\n      onMounted,\n      h,\n      getCurrentInstance,\n      render,\n      inject,\n      ref,\n      NodeNumber,\n      NodeAdd,\n      NodePrint,\n      callbackify\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n\n};","map":{"version":3,"mappings":"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","names":["Drawflow","onMounted","h","getCurrentInstance","render","inject","ref","NodeNumber","NodeAdd","NodePrint","callbackify","editor","Vue","version","instance","selectedNode","id","document","getElementById","value","appContext","app","_context","start","reroute","on","connection","connectionCreated","connectionRemoved","nodeSelected","nodeUnselected","registerNode","addNode","inputNode","getNodeFromId","input_id","outputNode","output_id","input_class","output","data","obj","undefined","updateNodeDataFromId","callback","response","console","log"],"sources":["/Users/juancamiloespinosa/Desktop/Juan Camilo/platzi/TR/drawflow-test/src/components/Board/Index.vue"],"sourcesContent":["<template>\n  <div id=\"drawflow\"></div>\n</template>\n\n<script setup>\nimport Drawflow from 'drawflow'\nimport { onMounted, h, getCurrentInstance, render, inject, ref } from 'vue'\nimport NodeNumber from './Nodes/NodeNumber';\nimport NodeAdd from './Nodes/NodeAdd.vue'\nimport NodePrint from './Nodes/NodePrint.vue'\nimport { callbackify } from 'util';\n\nconst editor = inject('editor');\nconst Vue = { version: 3, h, render };\nconst instance = getCurrentInstance();\n\nlet selectedNode = ref(0);\n\nonMounted(() => {\n    const id = document.getElementById(\"drawflow\");\n    editor.value = new Drawflow(id, Vue, instance.appContext.app._context);\n    editor.value.start();\n\n    editor.value.reroute = true;\n\n    editor.value.on('connectionCreated', connection => connectionCreated(connection))\n    editor.value.on('connectionRemoved', connection => connectionRemoved(connection))\n    editor.value.on('nodeSelected', id => nodeSelected(id))\n    editor.value.on('nodeUnselected', nodeUnselected())\n\n    editor.value.registerNode('nodeNumber', NodeNumber, { 'editor': editor.value }, {});\n    editor.value.registerNode('nodeAdd', NodeAdd, { 'editor': editor.value }, {});\n    editor.value.registerNode('nodePrint', NodePrint, { 'editor': editor.value }, {});\n\n    editor.value.addNode('number', 0, 1, 100, 100, 'number', {}, 'nodeNumber', 'vue');\n});\n\nconst connectionCreated = (connection) => {\n  const inputNode  = editor.value.getNodeFromId(connection.input_id)\n  const outputNode = editor.value.getNodeFromId(connection.output_id)\n\n  const input_class = connection.input_class\n  const output = outputNode.data.output\n\n  const obj = {...inputNode.data }\n  obj[input_class] = output\n\n  output != undefined ? editor.value.updateNodeDataFromId(connection.input_id, obj) : {}\n}\n\nconst connectionRemoved = (connection) => {\n  const obj = {...editor.value.getNodeFromId(connection.input_id).data}\n  const input_class = connection.input_class\n\n  delete obj[input_class]\n  editor.value.updateNodeDataFromId(connection.input_id, obj)\n}\n\nconst nodeSelected = (id) => {\n  selectedNode.value = id\n}\n\nconst nodeUnselected = () => {\n  callback(response)\n  console.log(selectedNode.value)\n}\n</script>\n\n<style scoped>\n#drawflow {\n  width: 100%;\n  height: 100%;\n  background-size: 20px 20px;\n  background-image: radial-gradient(#bebebe 1px, transparent 1px);\n}\n</style>"]},"metadata":{},"sourceType":"module"}