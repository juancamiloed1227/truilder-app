{"ast":null,"code":"import { createElementVNode as _createElementVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"node\",\n  class: \"node\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Content to print\", -1\n/* HOISTED */\n);\n\nconst _hoisted_3 = [_hoisted_2];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createBlock($setup[\"NodeTemplate\"], {\n    onClick: $setup.addNode,\n    title: \"Print\",\n    firstColor: \"79E0C2\",\n    secondColor: \"00E5A3\"\n  }, {\n    content: _withCtx(() => [_createElementVNode(\"div\", _hoisted_1, _hoisted_3, 512\n    /* NEED_PATCH */\n    )]),\n    _: 1\n    /* STABLE */\n\n  });\n}","map":{"version":3,"mappings":";;EAGiBA,GAAG,EAAC;EAAOC,KAAK,EAAC;;;gCAClBC,oBAAuB,GAAvB,EAAuB,IAAvB,EAAG,kBAAH,EAAmB;AAAA;AAAnB;;oBAAAC;;uBAHZC,aAMeC,sBANf,EAMe;IANAC,OAAK,EAAED,cAMP;IANgBE,KAAK,EAAC,OAMtB;IAN8BC,UAAU,EAAC,QAMzC;IANkDC,WAAW,EAAC;EAM9D,CANf;IACeC,OAAO,WACd,MAEM,CAFNR,oBAEM,KAFN,cAEMS,UAFN,EAEM;IAAA;IAFN,CAEM,CAHQ;;;;GADtB","names":["ref","class","_createElementVNode","_hoisted_2","_createBlock","$setup","onClick","title","firstColor","secondColor","content","_hoisted_3"],"sourceRoot":"","sources":["/Users/juancamiloespinosa/Desktop/Juan Camilo/platzi/TR/drawflow-test/src/components/Board/Nodes/NodePrint.vue"],"sourcesContent":["<template>\n    <NodeTemplate @click=\"addNode\" title=\"Print\" firstColor='79E0C2' secondColor=\"00E5A3\">\n        <template #content>\n            <div ref=\"node\" class=\"node\">\n                <p>Content to print</p>\n            </div>\n        </template>\n    </NodeTemplate>\n</template>\n\n<script setup>\nimport { defineEmits, defineProps } from 'vue';\nimport NodeTemplate from '@/components/Board/Nodes/NodeTemplate.vue'\n\nconst values = {\n    'name': 'print',\n    'inputs': 1,\n    'outputs': 0,\n    'node': 'nodePrint'\n}\n\nconst props = defineProps({\n    editor: {\n        type: Object,\n    }\n})\n\nconst emit = defineEmits([\"addNode\"]);\nconst addNode = () => emit('addNode', values)\n</script>\n\n<style>\n.node {\n    box-sizing: border-box;\n}\n.node:hover{\n    cursor: move;\n}\n</style>"]},"metadata":{},"sourceType":"module"}