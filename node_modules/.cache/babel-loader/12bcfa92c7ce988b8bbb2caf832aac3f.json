{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, resolveComponent as _resolveComponent, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-a7871740\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  ref: \"node\",\n  class: \"node\"\n};\nexport function render(_ctx, _cache) {\n  const _component_NodeTemplate = _resolveComponent(\"NodeTemplate\");\n\n  return _openBlock(), _createBlock(_component_NodeTemplate, {\n    onClick: _ctx.addNode,\n    title: \"For loop\",\n    firstColor: \"e0d74c\",\n    secondColor: \"ffef00\"\n  }, {\n    content: _withCtx(() => [_createElementVNode(\"div\", _hoisted_1, [_withDirectives(_createElementVNode(\"input\", {\n      onChange: _cache[0] || (_cache[0] = (...args) => _ctx.updateData && _ctx.updateData(...args)),\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.controlVariable = $event),\n      type: \"text\",\n      placeholder: \"Variable or number\"\n    }, null, 544\n    /* HYDRATE_EVENTS, NEED_PATCH */\n    ), [[_vModelText, _ctx.controlVariable]])], 512\n    /* NEED_PATCH */\n    )]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"onClick\"]);\n}","map":{"version":3,"mappings":";;;;;EAGiBA,GAAG,EAAC;EAAOC,KAAK,EAAC;;;;;uBAF9BC,aAMeC,uBANf,EAMe;IANAC,OAAK,EAAEC,YAMP;IANgBC,KAAK,EAAC,UAMtB;IANiCC,UAAU,EAAC,QAM5C;IANqDC,WAAW,EAAC;EAMjE,CANf;IACeC,OAAO,WACd,MAEM,CAFNC,oBAEM,KAFN,cAEM,iBADFA,oBAAoG,OAApG,EAAoG;MAA5FC,QAAM,yCAAEN,2CAAF,CAAsF;iEAA/DA,uBAAeO,OAAgD;MAA9CC,IAAI,EAAC,MAAyC;MAAlCC,WAAW,EAAC;IAAsB,CAApG;;IAAA,kBAAqCT,uBACnC,CAFN;;IAAA,CAEM,CAHQ;;;;GADtB;;EAAA","names":["ref","class","_createBlock","_component_NodeTemplate","onClick","_ctx","title","firstColor","secondColor","content","_createElementVNode","onChange","$event","type","placeholder"],"sourceRoot":"","sources":["/Users/juancamiloespinosa/Desktop/truilder/src/components/Board/Nodes/NodeFor.vue"],"sourcesContent":["<template>\n    <NodeTemplate @click=\"addNode\" title=\"For loop\" firstColor='e0d74c' secondColor=\"ffef00\">\n        <template #content>\n            <div ref=\"node\" class=\"node\">\n                <input @change=\"updateData\" v-model=\"controlVariable\" type=\"text\" placeholder=\"Variable or number\"/>\n            </div>\n        </template>\n    </NodeTemplate>\n</template>\n\n<script setup>\nimport { defineEmits, defineProps, onMounted, ref, nextTick } from 'vue';\nimport NodeTemplate from '@/components/Board/Nodes/NodeTemplate.vue'\n\nconst values = {\n    'name': 'for',\n    'inputs': 1,\n    'outputs': 1,\n    'node': 'nodeFor'\n}\n\nconst props = defineProps({\n    editor: {\n        type: Object,\n    }\n})\n\nlet node = ref(null);\nlet id = ref(0);\n\nconst emit = defineEmits([\"addNode\"]);\nconst addNode = () => emit('addNode', values)\nlet selectedNode = ref(0);\n\nconst controlVariable = ref();\n\nconst updateData = () => {\n    const node = props.editor.getNodeFromId(id)\n    const obj = {...node.data}\n\n    obj['loop'] ? obj['python']\n}\n\nonMounted(async () => {\n    await nextTick();\n    id = node.value.parentElement.parentElement.parentElement.id.split('-')[1];\n    props.editor.on('connectionCreated', connection => connectionCreated(connection))\n    props.editor.on('nodeSelected', id => nodeSelected(id))\n    props.editor.on('nodeUnselected', function() {\n        \n        const node_outputs = props.editor.getNodeFromId(id).outputs;\n        const keys = Object.keys(node_outputs);\n\n        for(let i = 0; i < keys.length; i++){\n            const key = keys[i]\n            node_outputs[key].connections.forEach(connection => {\n                const obj = {'input_class': connection.output, 'input_id': connection.node, 'output_class': key, 'output_id': id}\n                connection.node == selectedNode.value ? connectionCreated(obj) : {}\n            });\n        }\n    })\n});\n\nconst connectionCreated = (connection) => {\n    \n    if(connection.output_id == id){\n\n    }\n} \n\nconst nodeSelected = (id) => selectedNode.value = id\n</script>\n\n<style scoped>\n.variable-name, .number {\n    margin: 4px 0 4px 0;\n    padding: 4px 6px 4px 6px;\n    border-radius: 5px;\n    border: none;\n}\n.node {\n    box-sizing: border-box;\n}\n.node:hover{\n    cursor: move;\n}\np {\n    padding-left: 4px;\n    color: white;\n}\nbutton {\n    width: 100%;\n    border: none;\n    background: white;\n    padding: 5px 3px 5px 3px;\n    margin-bottom: 5px;\n    border-radius: 10px;\n    color: #222222;\n}\n</style>"]},"metadata":{},"sourceType":"module"}