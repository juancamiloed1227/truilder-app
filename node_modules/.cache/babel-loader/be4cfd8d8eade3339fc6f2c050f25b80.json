{"ast":null,"code":"import Drawflow from 'drawflow';\nimport { onMounted, h, getCurrentInstance, render, inject, ref } from 'vue';\nimport NodeNumber from './Nodes/NodeNumber';\nimport NodeAdd from './Nodes/NodeAdd.vue';\nimport NodePrint from './Nodes/NodePrint.vue';\nexport default {\n  __name: 'Index',\n\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const editor = inject('editor');\n    const Vue = {\n      version: 3,\n      h,\n      render\n    };\n    const instance = getCurrentInstance();\n    let selectedNode = ref(0);\n    onMounted(() => {\n      const id = document.getElementById(\"drawflow\");\n      editor.value = new Drawflow(id, Vue, instance.appContext.app._context);\n      editor.value.start();\n      editor.value.reroute = true;\n      editor.value.on('connectionCreated', connection => connectionCreated(connection));\n      editor.value.on('connectionRemoved', connection => connectionRemoved(connection));\n      editor.value.on('nodeSelected', id => nodeSelected(id));\n      editor.value.on('nodeUnselected', function () {\n        const node_outputs = editor.value.getNodeFromId(selectedNode.value).outputs;\n        const keys = Object.keys(node_outputs);\n\n        for (let i = 0; i < keys.length; i++) {\n          let key = keys[i];\n          node_outputs[key].connections.forEach(connection => {\n            let obj = { ...editor.value.getNodeFromId(connection.node).data\n            };\n            obj[connection.output] = editor.value.getNodeFromId(selectedNode.value).data.output;\n            editor.value.updateNodeDataFromId(connection.node, obj);\n          });\n        }\n      });\n      editor.value.registerNode('nodeNumber', NodeNumber, {\n        'editor': editor.value\n      }, {});\n      editor.value.registerNode('nodeAdd', NodeAdd, {\n        'editor': editor.value\n      }, {});\n      editor.value.registerNode('nodePrint', NodePrint, {\n        'editor': editor.value\n      }, {});\n      editor.value.addNode('number', 0, 1, 100, 100, 'number', {}, 'nodeNumber', 'vue');\n    });\n\n    const connectionCreated = connection => {\n      const inputNode = editor.value.getNodeFromId(connection.input_id);\n      const outputNode = editor.value.getNodeFromId(connection.output_id);\n      const input_class = connection.input_class;\n      const output = outputNode.data.output;\n      const obj = { ...inputNode.data\n      };\n      obj[input_class] = output;\n      editor.value.updateNodeDataFromId(connection.input_id, obj);\n    };\n\n    const connectionRemoved = connection => {\n      const obj = { ...editor.value.getNodeFromId(connection.input_id).data\n      };\n      const input_class = connection.input_class;\n      delete obj[input_class];\n      editor.value.updateNodeDataFromId(connection.input_id, obj);\n    };\n\n    const nodeSelected = id => {\n      selectedNode.value = id;\n    };\n\n    const __returned__ = {\n      editor,\n      Vue,\n      instance,\n      selectedNode,\n      connectionCreated,\n      connectionRemoved,\n      nodeSelected,\n      Drawflow,\n      onMounted,\n      h,\n      getCurrentInstance,\n      render,\n      inject,\n      ref,\n      NodeNumber,\n      NodeAdd,\n      NodePrint\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n\n};","map":{"version":3,"mappings":"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","names":["Drawflow","onMounted","h","getCurrentInstance","render","inject","ref","NodeNumber","NodeAdd","NodePrint","editor","Vue","version","instance","selectedNode","id","document","getElementById","value","appContext","app","_context","start","reroute","on","connection","connectionCreated","connectionRemoved","nodeSelected","node_outputs","getNodeFromId","outputs","keys","Object","i","length","key","connections","forEach","obj","node","data","output","updateNodeDataFromId","registerNode","addNode","inputNode","input_id","outputNode","output_id","input_class"],"sources":["/Users/juancamiloespinosa/Desktop/Juan Camilo/platzi/TR/drawflow-test/src/components/Board/Index.vue"],"sourcesContent":["<template>\n  <div id=\"drawflow\"></div>\n</template>\n\n<script setup>\nimport Drawflow from 'drawflow'\nimport { onMounted, h, getCurrentInstance, render, inject, ref } from 'vue'\nimport NodeNumber from './Nodes/NodeNumber';\nimport NodeAdd from './Nodes/NodeAdd.vue'\nimport NodePrint from './Nodes/NodePrint.vue'\n\nconst editor = inject('editor');\nconst Vue = { version: 3, h, render };\nconst instance = getCurrentInstance();\n\nlet selectedNode = ref(0);\n\nonMounted(() => {\n    const id = document.getElementById(\"drawflow\");\n    editor.value = new Drawflow(id, Vue, instance.appContext.app._context);\n    editor.value.start();\n\n    editor.value.reroute = true;\n\n    editor.value.on('connectionCreated', connection => connectionCreated(connection))\n    editor.value.on('connectionRemoved', connection => connectionRemoved(connection))\n    editor.value.on('nodeSelected', id => nodeSelected(id))\n    editor.value.on('nodeUnselected', function() {\n      const node_outputs = editor.value.getNodeFromId(selectedNode.value).outputs\n      const keys = Object.keys(node_outputs)\n\n      for(let i = 0; i < keys.length; i++){\n        let key = keys[i]\n        \n        node_outputs[key].connections.forEach(connection => {\n          let obj = {...editor.value.getNodeFromId(connection.node).data};\n          obj[connection.output] = editor.value.getNodeFromId(selectedNode.value).data.output;\n          editor.value.updateNodeDataFromId(connection.node, obj)\n        }); \n      }\n    })\n\n    editor.value.registerNode('nodeNumber', NodeNumber, { 'editor': editor.value }, {});\n    editor.value.registerNode('nodeAdd', NodeAdd, { 'editor': editor.value }, {});\n    editor.value.registerNode('nodePrint', NodePrint, { 'editor': editor.value }, {});\n\n    editor.value.addNode('number', 0, 1, 100, 100, 'number', {}, 'nodeNumber', 'vue');\n});\n\nconst connectionCreated = (connection) => {\n  const inputNode  = editor.value.getNodeFromId(connection.input_id)\n  const outputNode = editor.value.getNodeFromId(connection.output_id)\n\n  const input_class = connection.input_class\n  const output = outputNode.data.output\n\n  const obj = {...inputNode.data }\n  obj[input_class] = output\n\n  editor.value.updateNodeDataFromId(connection.input_id, obj)\n}\n\nconst connectionRemoved = (connection) => {\n  const obj = {...editor.value.getNodeFromId(connection.input_id).data}\n  const input_class = connection.input_class\n\n  delete obj[input_class]\n  editor.value.updateNodeDataFromId(connection.input_id, obj)\n}\n\nconst nodeSelected = (id) => {\n  selectedNode.value = id\n}\n</script>\n\n<style scoped>\n#drawflow {\n  width: 100%;\n  height: 100%;\n  background-size: 20px 20px;\n  background-image: radial-gradient(#bebebe 1px, transparent 1px);\n}\n</style>"]},"metadata":{},"sourceType":"module"}