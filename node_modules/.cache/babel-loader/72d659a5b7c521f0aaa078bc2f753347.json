{"ast":null,"code":"import { onMounted, ref, nextTick } from 'vue';\nimport NodeTemplate from '@/components/Board/Nodes/NodeTemplate.vue';\nexport default {\n  __name: 'NodeFor',\n  props: {\n    editor: {\n      type: Object\n    }\n  },\n  emits: [\"addNode\"],\n\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    expose();\n    const props = __props;\n    const values = {\n      'name': 'for',\n      'inputs': 1,\n      'outputs': 1,\n      'node': 'nodeBlock'\n    };\n    let node = ref(null);\n    let id = ref(0);\n\n    const addNode = () => emit('addNode', values);\n\n    let selectedNode = ref(0);\n    onMounted(async () => {\n      await nextTick();\n      id = node.value.parentElement.parentElement.parentElement.id.split('-')[1];\n      props.editor.on('connectionCreated', connection => connectionCreated(connection));\n      props.editor.on('nodeSelected', id => nodeSelected(id));\n      props.editor.on('nodeUnselected', function () {\n        const node_outputs = props.editor.getNodeFromId(id).outputs;\n        const keys = Object.keys(node_outputs);\n\n        for (let i = 0; i < keys.length; i++) {\n          const key = keys[i];\n          node_outputs[key].connections.forEach(connection => {\n            const obj = {\n              'input_class': connection.output,\n              'input_id': connection.node,\n              'output_class': key,\n              'output_id': id\n            };\n            connection.node == selectedNode.value ? connectionCreated(obj) : {};\n          });\n        }\n      });\n    });\n\n    const connectionCreated = connection => {\n      if (connection.output_id == id) {\n        const input_node = props.editor.getNodeFromId(connection.input_id);\n        const output_node = props.editor.getNodeFromId(connection.output_id);\n        input_node.class == 'add' && Object.keys(input_node.inputs).length == 2 ? props.editor.addNodeInput(connection.input_id) : {};\n        const obj = { ...output_node.data\n        };\n\n        if (input_node.data.python != undefined) {\n          const output_class = connection.output_class;\n          obj[output_class] = input_node.data.python;\n          props.editor.updateNodeDataFromId(id, obj);\n          const input_data = { ...input_node.data\n          };\n          input_data['convertible'] = false;\n          props.editor.updateNodeDataFromId(connection.input_id, input_data);\n        }\n\n        let pythonCode = '';\n        const keys = Object.keys(obj);\n\n        for (let i = 0; i < keys.length; i++) {\n          const key = keys[i];\n\n          if (key != 'python' && key != 'convertible') {\n            i != keys.length - 1 ? pythonCode += `${obj[key]}\\n` : pythonCode += `${obj[key]}`;\n          }\n        }\n\n        obj['python'] = pythonCode;\n      }\n\n      if (connection.input_id == id) {\n        const obj = { ...props.editor.getNodeFromId(id).data\n        };\n        obj['convertible'] = false;\n        props.editor.updateNodeDataFromId(id, obj);\n      }\n    };\n\n    const nodeSelected = id => selectedNode.value = id;\n\n    const __returned__ = {\n      values,\n      props,\n      node,\n      id,\n      emit,\n      addNode,\n      selectedNode,\n      connectionCreated,\n      nodeSelected,\n      onMounted,\n      ref,\n      nextTick,\n      NodeTemplate\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n\n};","map":{"version":3,"mappings":"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","names":["onMounted","ref","nextTick","NodeTemplate","values","node","id","addNode","emit","selectedNode","value","parentElement","split","props","editor","on","connection","connectionCreated","nodeSelected","node_outputs","getNodeFromId","outputs","keys","Object","i","length","key","connections","forEach","obj","output","output_id","input_node","input_id","output_node","class","inputs","addNodeInput","data","python","undefined","output_class","updateNodeDataFromId","input_data","pythonCode"],"sources":["/Users/juancamiloespinosa/Desktop/truilder/src/components/Board/Nodes/NodeFor.vue"],"sourcesContent":["<template>\n    <NodeTemplate @click=\"addNode\" title=\"For loop\" firstColor='e0d74c' secondColor=\"ffef00\">\n        <template #content>\n            <div ref=\"node\" class=\"node\">\n                <input type=\"text\" placeholder=\"Variable or number\"/>\n            </div>\n        </template>\n    </NodeTemplate>\n</template>\n\n<script setup>\nimport { defineEmits, defineProps, onMounted, ref, nextTick } from 'vue';\nimport NodeTemplate from '@/components/Board/Nodes/NodeTemplate.vue'\n\nconst values = {\n    'name': 'for',\n    'inputs': 1,\n    'outputs': 1,\n    'node': 'nodeBlock'\n}\n\nconst props = defineProps({\n    editor: {\n        type: Object,\n    }\n})\n\nlet node = ref(null);\nlet id = ref(0);\n\nconst emit = defineEmits([\"addNode\"]);\nconst addNode = () => emit('addNode', values)\nlet selectedNode = ref(0);\n\nonMounted(async () => {\n    await nextTick();\n    id = node.value.parentElement.parentElement.parentElement.id.split('-')[1];\n    props.editor.on('connectionCreated', connection => connectionCreated(connection))\n    props.editor.on('nodeSelected', id => nodeSelected(id))\n    props.editor.on('nodeUnselected', function() {\n        \n        const node_outputs = props.editor.getNodeFromId(id).outputs;\n        const keys = Object.keys(node_outputs);\n\n        for(let i = 0; i < keys.length; i++){\n            const key = keys[i]\n            node_outputs[key].connections.forEach(connection => {\n                const obj = {'input_class': connection.output, 'input_id': connection.node, 'output_class': key, 'output_id': id}\n                connection.node == selectedNode.value ? connectionCreated(obj) : {}\n            });\n        }\n    })\n});\n\nconst connectionCreated = (connection) => {\n    if(connection.output_id == id){\n        const input_node = props.editor.getNodeFromId(connection.input_id)\n        const output_node = props.editor.getNodeFromId(connection.output_id)\n        input_node.class == 'add' && Object.keys(input_node.inputs).length == 2 ? props.editor.addNodeInput(connection.input_id) : {}\n        \n        const obj = {...output_node.data}\n        if (input_node.data.python != undefined){\n            const output_class = connection.output_class\n            obj[output_class] = input_node.data.python\n            props.editor.updateNodeDataFromId(id, obj)\n\n            const input_data = {...input_node.data}\n            input_data['convertible'] = false\n            props.editor.updateNodeDataFromId(connection.input_id, input_data)\n        }\n        \n        let pythonCode = ''\n        const keys = Object.keys(obj)\n        for(let i = 0; i < keys.length; i++){\n            const key = keys[i]\n            if(key != 'python' && key != 'convertible'){\n                i != keys.length -1 ? pythonCode += `${obj[key]}\\n` : pythonCode += `${obj[key]}`\n            }\n        }\n        obj['python'] = pythonCode\n    }\n    if(connection.input_id == id){\n        const obj = {...props.editor.getNodeFromId(id).data}\n        obj['convertible'] = false\n        props.editor.updateNodeDataFromId(id, obj)\n    }\n} \n\nconst nodeSelected = (id) => selectedNode.value = id\n</script>\n\n<style scoped>\n.variable-name, .number {\n    margin: 4px 0 4px 0;\n    padding: 4px 6px 4px 6px;\n    border-radius: 5px;\n    border: none;\n}\n.node {\n    box-sizing: border-box;\n}\n.node:hover{\n    cursor: move;\n}\np {\n    padding-left: 4px;\n    color: white;\n}\nbutton {\n    width: 100%;\n    border: none;\n    background: white;\n    padding: 5px 3px 5px 3px;\n    margin-bottom: 5px;\n    border-radius: 10px;\n    color: #222222;\n}\n</style>"]},"metadata":{},"sourceType":"module"}