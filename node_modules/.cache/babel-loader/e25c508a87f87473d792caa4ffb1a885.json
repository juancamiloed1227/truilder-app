{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-a18d0854\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  ref: \"node\",\n  class: \"node\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"equal\"\n}, \"Equal to\", -1\n/* HOISTED */\n));\n\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"greater\"\n}, \"Greater than\", -1\n/* HOISTED */\n));\n\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"smaller\"\n}, \"Smaller than\", -1\n/* HOISTED */\n));\n\nconst _hoisted_5 = [_hoisted_2, _hoisted_3, _hoisted_4];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createBlock($setup[\"NodeTemplate\"], {\n    onClick: $setup.addNode,\n    title: \"If\",\n    firstColor: \"e0d74c\",\n    secondColor: \"ffef00\"\n  }, {\n    content: _withCtx(() => [_createElementVNode(\"div\", _hoisted_1, [_withDirectives(_createElementVNode(\"select\", {\n      class: \"selector\",\n      onChange: $setup.updateData,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.condition = $event)\n    }, _hoisted_5, 544\n    /* HYDRATE_EVENTS, NEED_PATCH */\n    ), [[_vModelSelect, $setup.condition]]), _withDirectives(_createElementVNode(\"input\", {\n      class: \"variable\",\n      onChange: $setup.updateData,\n      type: \"number\",\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.number = $event)\n    }, null, 544\n    /* HYDRATE_EVENTS, NEED_PATCH */\n    ), [[_vModelText, $setup.number]])], 512\n    /* NEED_PATCH */\n    )]),\n    _: 1\n    /* STABLE */\n\n  });\n}","map":{"version":3,"mappings":";;;;;EAGiBA,GAAG,EAAC;EAAOC,KAAK,EAAC;;;gEAEdC,oBAAuC,QAAvC,EAAuC;EAA/BC,KAAK,EAAC;AAAyB,CAAvC,EAAsB,UAAtB,EAA8B;AAAA;AAA9B;;gEACAD,oBAA6C,QAA7C,EAA6C;EAArCC,KAAK,EAAC;AAA+B,CAA7C,EAAwB,cAAxB,EAAoC;AAAA;AAApC;;gEACAD,oBAA6C,QAA7C,EAA6C;EAArCC,KAAK,EAAC;AAA+B,CAA7C,EAAwB,cAAxB,EAAoC;AAAA;AAApC;;oBAFAC,YACAC,YACAC;;uBANhBC,aAWeC,sBAXf,EAWe;IAXAC,OAAK,EAAED,cAWP;IAXgBE,KAAK,EAAC,IAWtB;IAX2BC,UAAU,EAAC,QAWtC;IAX+CC,WAAW,EAAC;EAW3D,CAXf;IACeC,OAAO,WACd,MAOM,CAPNX,oBAOM,KAPN,cAOM,iBANFA,oBAIS,QAJT,EAIS;MAJDD,KAAK,EAAC,UAIL;MAJiBa,QAAM,EAAEN,iBAIzB;iEAJ8CA,mBAASO;IAIvD,CAJT;;IAAA,oBAAuDP,mBAMrD,kBADFN,oBAA6E,OAA7E,EAA6E;MAAtED,KAAK,EAAC,UAAgE;MAApDa,QAAM,EAAEN,iBAA4C;MAAhCQ,IAAI,EAAC,QAA2B;iEAATR,gBAAMO;IAAG,CAA7E;;IAAA,kBAAoEP,gBAClE,CAPN;;IAAA,CAOM,CARQ;;;;GADtB","names":["ref","class","_createElementVNode","value","_hoisted_2","_hoisted_3","_hoisted_4","_createBlock","$setup","onClick","title","firstColor","secondColor","content","onChange","$event","type"],"sourceRoot":"","sources":["/Users/juancamiloespinosa/Desktop/truilder-app/src/components/Board/Nodes/NodeIf.vue"],"sourcesContent":["<template>\n    <NodeTemplate @click=\"addNode\" title=\"If\" firstColor='e0d74c' secondColor=\"ffef00\">\n        <template #content>\n            <div ref=\"node\" class=\"node\">\n                <select class=\"selector\" @change=\"updateData\" v-model=\"condition\">\n                    <option value=\"equal\">Equal to</option>\n                    <option value=\"greater\">Greater than</option>\n                    <option value=\"smaller\">Smaller than</option>\n                </select>\n                <input class=\"variable\" @change=\"updateData\" type=\"number\" v-model=\"number\"/>\n            </div>\n        </template>\n    </NodeTemplate>\n</template>\n\n<script setup>\nimport { defineEmits, defineProps, onMounted, ref, nextTick } from 'vue';\nimport NodeTemplate from '@/components/Board/Nodes/NodeTemplate.vue'\n\nconst values = {\n    'name': 'if',\n    'inputs': 1,\n    'outputs': 2,\n    'node': 'nodeIf'\n}\n\nconst props = defineProps({\n    editor: {\n        type: Object,\n    }\n})\n\nlet node = ref(null);\nlet id = ref(0);\n\nconst condition = ref(\"equal\")\nconst number = ref(0)\n\nconst emit = defineEmits([\"addNode\"]);\nconst addNode = () => emit('addNode', values)\n\nconst updateData = () => {\n    const obj = {...props.editor.getNodeFromId(id).data};\n    obj['output'] = variableName.value;\n    \n    obj['selection'] = condition.value\n    number.value != undefined ? obj['number'] = number.value : {}\n    \n    props.editor.updateNodeDataFromId(id, obj)\n}\n\nonMounted(async () => {\n    await nextTick();\n    id = node.value.parentElement.parentElement.parentElement.id.split('-')[1];\n\n    const data = props.editor.getNodeFromId(id).data\n    data.selection != undefined ? condition.value = data.selection : {}\n    data.number != undefined ? number.value = data.number : {}\n\n    props.editor.on('connectionCreated', connection => connectionCreated(connection))\n});\n\nconst connectionCreated = (connection) => {\n    if(connection.input_id == id){\n        const obj = {...props.editor.getNodeFromId(id).data}\n        obj['input_1'] = props.editor.getNodeFromId(connection.output_id).data.output\n        obj['condition'] = condition.value == 'equal' ? `if ${obj.input_1} == ${number.value}:` : condition.value == 'greater' ? `if ${obj.input_1} > ${number.value}:` : `if ${obj.input_1} < ${number.value}:`\n        obj.yes_path != undefined && obj.no_path != undefined ? obj['python'] = `${obj.condition}\\n   ${obj.yes_path}\\nelse:\\n   ${obj.no_path}` : obj.yes_path != undefined && obj.no_path == undefined ? obj['python'] = `${obj.condition}\\n   ${obj.yes_path}\\n` : {}\n        props.editor.updateNodeDataFromId(id, obj)\n    }else if(connection.output_id == id){\n        const obj = {...props.editor.getNodeFromId(id).data}\n        connection.output_class == 'output_1' ? obj['yes_path'] = props.editor.getNodeFromId(connection.input_id).data.python : obj['no_path'] = props.editor.getNodeFromId(connection.input_id).data.python\n        obj.yes_path != undefined && obj.no_path != undefined ? obj['python'] = `${obj.condition}\\n   ${obj.yes_path}\\nelse:\\n   ${obj.no_path}` : obj.yes_path != undefined && obj.no_path == undefined ? obj['python'] = `${obj.condition}\\n   ${obj.yes_path}\\n` : {}\n        props.editor.updateNodeDataFromId(id, obj)\n    }\n    \n}\n</script>\n\n<style scoped>\n.variable-name, .number {\n    margin: 4px 0 4px 0;\n    padding: 4px 6px 4px 6px;\n    border-radius: 5px;\n    border: none;\n}\n.node {\n    box-sizing: border-box;\n}\n.node:hover{\n    cursor: move;\n}\n.selector {%\n    width:100\n}\np {\n    padding-left: 4px;\n    color: white;\n}\n</style>"]},"metadata":{},"sourceType":"module"}