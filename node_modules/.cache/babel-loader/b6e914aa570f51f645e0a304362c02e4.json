{"ast":null,"code":"import { onMounted, ref, nextTick } from 'vue';\nimport NodeTemplate from '@/components/Board/Nodes/NodeTemplate.vue';\nexport default {\n  __name: 'NodeFor',\n  props: {\n    editor: {\n      type: Object\n    }\n  },\n  emits: [\"addNode\"],\n\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    expose();\n    const props = __props;\n    const values = {\n      'name': 'for',\n      'inputs': 1,\n      'outputs': 1,\n      'node': 'nodeFor'\n    };\n    let node = ref(null);\n    let id = ref(0);\n\n    const addNode = () => emit('addNode', values);\n\n    let selectedNode = ref(0);\n    const controlVariable = ref();\n\n    const updateData = () => {\n      const node = props.editor.getNodeFromId(id);\n      const obj = { ...node.data\n      };\n      controlVariable.value != undefined ? obj['controlVariable'] = controlVariable.value : {};\n      obj['python'] = obj['loop'] ? `for i in range(${controlVariable.value}):\\n  ${obj.loop}` : `for i in range(${controlVariable.value}):\\n   `;\n      props.editor.updateNodeDataFromId(id, obj);\n    };\n\n    onMounted(async () => {\n      await nextTick();\n      id = node.value.parentElement.parentElement.parentElement.id.split('-')[1];\n      props.editor.on('connectionCreated', connection => connectionCreated(connection));\n    });\n\n    const connectionCreated = connection => {\n      if (connection.output_id == id) {\n        const input_node = props.editor.getNodeFromId(connection.input_id);\n        const obj = { ...input_node.data\n        };\n        obj['convertible'] = false;\n\n        if (obj['python']) {\n          const output_data = { ...props.editor.getNodeFromId(id).data\n          };\n\n          if (output_data.python != undefined) {\n            output_data['loop'] = obj.python;\n            output_data.python += obj.python;\n            props.editor.updateNodeDataFromId(id, output_data);\n          } else {\n            output_data['loop'] = obj.python;\n            props.editor.updateNodeDataFromId(id, output_data);\n          }\n        }\n      }\n    };\n\n    const nodeSelected = id => selectedNode.value = id;\n\n    const __returned__ = {\n      values,\n      props,\n      node,\n      id,\n      emit,\n      addNode,\n      selectedNode,\n      controlVariable,\n      updateData,\n      connectionCreated,\n      nodeSelected,\n      onMounted,\n      ref,\n      nextTick,\n      NodeTemplate\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n\n};","map":{"version":3,"mappings":"AAWA,SAAmCA,SAAnC,EAA8CC,GAA9C,EAAmDC,QAAnD,QAAmE,KAAnE;AACA,OAAOC,YAAP,MAAyB,2CAAzB;;;;;;;;;;;;;;;;IAEA,MAAMC,MAAM,GAAG;MACX,QAAQ,KADG;MAEX,UAAU,CAFC;MAGX,WAAW,CAHA;MAIX,QAAQ;IAJG,CAAf;IAaA,IAAIC,IAAI,GAAGJ,GAAG,CAAC,IAAD,CAAd;IACA,IAAIK,EAAE,GAAGL,GAAG,CAAC,CAAD,CAAZ;;IAGA,MAAMM,OAAO,GAAG,MAAMC,IAAI,CAAC,SAAD,EAAYJ,MAAZ,CAA1B;;IACA,IAAIK,YAAY,GAAGR,GAAG,CAAC,CAAD,CAAtB;IAEA,MAAMS,eAAe,GAAGT,GAAG,EAA3B;;IAEA,MAAMU,UAAU,GAAG,MAAM;MACrB,MAAMN,IAAI,GAAGO,KAAK,CAACC,MAAN,CAAaC,aAAb,CAA2BR,EAA3B,CAAb;MACA,MAAMS,GAAG,GAAG,EAAC,GAAGV,IAAI,CAACW;MAAT,CAAZ;MACAN,eAAe,CAACO,KAAhB,IAAyBC,SAAzB,GAAqCH,GAAG,CAAC,iBAAD,CAAH,GAAyBL,eAAe,CAACO,KAA9E,GAAsF,EAAtF;MACAF,GAAG,CAAC,QAAD,CAAH,GAAgBA,GAAG,CAAC,MAAD,CAAH,GAAe,kBAAiBL,eAAe,CAACO,KAAM,SAAQF,GAAG,CAACI,IAAK,EAAvE,GAA4E,kBAAiBT,eAAe,CAACO,KAAM,SAAnI;MACAL,KAAK,CAACC,MAAN,CAAaO,oBAAb,CAAkCd,EAAlC,EAAsCS,GAAtC;IACH,CAND;;IAQAf,SAAS,CAAC,YAAY;MAClB,MAAME,QAAQ,EAAd;MACAI,EAAE,GAAGD,IAAI,CAACY,KAAL,CAAWI,aAAX,CAAyBA,aAAzB,CAAuCA,aAAvC,CAAqDf,EAArD,CAAwDgB,KAAxD,CAA8D,GAA9D,EAAmE,CAAnE,CAAL;MACAV,KAAK,CAACC,MAAN,CAAaU,EAAb,CAAgB,mBAAhB,EAAqCC,UAAU,IAAIC,iBAAiB,CAACD,UAAD,CAApE;IACH,CAJQ,CAAT;;IAMA,MAAMC,iBAAiB,GAAID,UAAD,IAAgB;MACtC,IAAGA,UAAU,CAACE,SAAX,IAAwBpB,EAA3B,EAA8B;QAC1B,MAAMqB,UAAU,GAAGf,KAAK,CAACC,MAAN,CAAaC,aAAb,CAA2BU,UAAU,CAACI,QAAtC,CAAnB;QACA,MAAMb,GAAG,GAAG,EAAC,GAAGY,UAAU,CAACX;QAAf,CAAZ;QACAD,GAAG,CAAC,aAAD,CAAH,GAAqB,KAArB;;QACA,IAAGA,GAAG,CAAC,QAAD,CAAN,EAAiB;UACb,MAAMc,WAAW,GAAG,EAAC,GAAGjB,KAAK,CAACC,MAAN,CAAaC,aAAb,CAA2BR,EAA3B,EAA+BU;UAAnC,CAApB;;UACA,IAAGa,WAAW,CAACC,MAAZ,IAAsBZ,SAAzB,EAAoC;YAChCW,WAAW,CAAC,MAAD,CAAX,GAAsBd,GAAG,CAACe,MAA1B;YACAD,WAAW,CAACC,MAAZ,IAAsBf,GAAG,CAACe,MAA1B;YACAlB,KAAK,CAACC,MAAN,CAAaO,oBAAb,CAAkCd,EAAlC,EAAsCuB,WAAtC;UACH,CAJD,MAIM;YACFA,WAAW,CAAC,MAAD,CAAX,GAAsBd,GAAG,CAACe,MAA1B;YACAlB,KAAK,CAACC,MAAN,CAAaO,oBAAb,CAAkCd,EAAlC,EAAsCuB,WAAtC;UACH;QACJ;MACJ;IACJ,CAjBD;;IAmBA,MAAME,YAAY,GAAIzB,EAAD,IAAQG,YAAY,CAACQ,KAAb,GAAqBX,EAAlD","names":["onMounted","ref","nextTick","NodeTemplate","values","node","id","addNode","emit","selectedNode","controlVariable","updateData","props","editor","getNodeFromId","obj","data","value","undefined","loop","updateNodeDataFromId","parentElement","split","on","connection","connectionCreated","output_id","input_node","input_id","output_data","python","nodeSelected"],"sources":["/Users/juancamiloespinosa/Desktop/truilder-app/src/components/Board/Nodes/NodeFor.vue"],"sourcesContent":["<template>\n    <NodeTemplate @click=\"addNode\" title=\"For loop\" firstColor='e0d74c' secondColor=\"ffef00\">\n        <template #content>\n            <div ref=\"node\" class=\"node\">\n                <input @change=\"updateData\" v-model=\"controlVariable\" type=\"text\" placeholder=\"Variable or number\"/>\n            </div>\n        </template>\n    </NodeTemplate>\n</template>\n\n<script setup>\nimport { defineEmits, defineProps, onMounted, ref, nextTick } from 'vue';\nimport NodeTemplate from '@/components/Board/Nodes/NodeTemplate.vue'\n\nconst values = {\n    'name': 'for',\n    'inputs': 1,\n    'outputs': 1,\n    'node': 'nodeFor'\n}\n\nconst props = defineProps({\n    editor: {\n        type: Object,\n    }\n})\n\nlet node = ref(null);\nlet id = ref(0);\n\nconst emit = defineEmits([\"addNode\"]);\nconst addNode = () => emit('addNode', values)\nlet selectedNode = ref(0);\n\nconst controlVariable = ref();\n\nconst updateData = () => {\n    const node = props.editor.getNodeFromId(id)\n    const obj = {...node.data}\n    controlVariable.value != undefined ? obj['controlVariable'] = controlVariable.value : {}\n    obj['python'] = obj['loop'] ? `for i in range(${controlVariable.value}):\\n  ${obj.loop}` : `for i in range(${controlVariable.value}):\\n   `\n    props.editor.updateNodeDataFromId(id, obj)\n}\n\nonMounted(async () => {\n    await nextTick();\n    id = node.value.parentElement.parentElement.parentElement.id.split('-')[1];\n    props.editor.on('connectionCreated', connection => connectionCreated(connection))\n});\n\nconst connectionCreated = (connection) => {\n    if(connection.output_id == id){\n        const input_node = props.editor.getNodeFromId(connection.input_id)\n        const obj = {...input_node.data}\n        obj['convertible'] = false\n        if(obj['python']){\n            const output_data = {...props.editor.getNodeFromId(id).data}\n            if(output_data.python != undefined) {\n                output_data['loop'] = obj.python\n                output_data.python += obj.python\n                props.editor.updateNodeDataFromId(id, output_data)\n            } else{\n                output_data['loop'] = obj.python\n                props.editor.updateNodeDataFromId(id, output_data)\n            }\n        }\n    }\n} \n\nconst nodeSelected = (id) => selectedNode.value = id\n</script>\n\n<style scoped>\n.variable-name, .number {\n    margin: 4px 0 4px 0;\n    padding: 4px 6px 4px 6px;\n    border-radius: 5px;\n    border: none;\n}\n.node {\n    box-sizing: border-box;\n}\n.node:hover{\n    cursor: move;\n}\np {\n    padding-left: 4px;\n    color: white;\n}\nbutton {\n    width: 100%;\n    border: none;\n    background: white;\n    padding: 5px 3px 5px 3px;\n    margin-bottom: 5px;\n    border-radius: 10px;\n    color: #222222;\n}\n</style>"]},"metadata":{},"sourceType":"module"}