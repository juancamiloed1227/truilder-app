{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText, resolveComponent as _resolveComponent, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-a18d0854\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  ref: \"node\",\n  class: \"node\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"equal\"\n}, \"Equal to\", -1\n/* HOISTED */\n));\n\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"greater\"\n}, \"Greater than\", -1\n/* HOISTED */\n));\n\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"smaller\"\n}, \"Smaller than\", -1\n/* HOISTED */\n));\n\nconst _hoisted_5 = [_hoisted_2, _hoisted_3, _hoisted_4];\nexport function render(_ctx, _cache) {\n  const _component_NodeTemplate = _resolveComponent(\"NodeTemplate\");\n\n  return _openBlock(), _createBlock(_component_NodeTemplate, {\n    onClick: _ctx.addNode,\n    title: \"If\",\n    firstColor: \"e0d74c\",\n    secondColor: \"ffef00\"\n  }, {\n    content: _withCtx(() => [_createElementVNode(\"div\", _hoisted_1, [_withDirectives(_createElementVNode(\"select\", {\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.condition = $event)\n    }, _hoisted_5, 512\n    /* NEED_PATCH */\n    ), [[_vModelSelect, _ctx.condition]]), _withDirectives(_createElementVNode(\"input\", {\n      type: \"number\",\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.number = $event)\n    }, null, 512\n    /* NEED_PATCH */\n    ), [[_vModelText, _ctx.number]])], 512\n    /* NEED_PATCH */\n    )]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"onClick\"]);\n}","map":{"version":3,"mappings":";;;;;EAGiBA,GAAG,EAAC;EAAOC,KAAK,EAAC;;;gEAEdC,oBAAuC,QAAvC,EAAuC;EAA/BC,KAAK,EAAC;AAAyB,CAAvC,EAAsB,UAAtB,EAA8B;AAAA;AAA9B;;gEACAD,oBAA6C,QAA7C,EAA6C;EAArCC,KAAK,EAAC;AAA+B,CAA7C,EAAwB,cAAxB,EAAoC;AAAA;AAApC;;gEACAD,oBAA6C,QAA7C,EAA6C;EAArCC,KAAK,EAAC;AAA+B,CAA7C,EAAwB,cAAxB,EAAoC;AAAA;AAApC;;oBAFAC,YACAC,YACAC;;;;uBANhBC,aAWeC,uBAXf,EAWe;IAXAC,OAAK,EAAEC,YAWP;IAXgBC,KAAK,EAAC,IAWtB;IAX2BC,UAAU,EAAC,QAWtC;IAX+CC,WAAW,EAAC;EAW3D,CAXf;IACeC,OAAO,WACd,MAOM,CAPNZ,oBAOM,KAPN,cAOM,iBANFA,oBAIS,QAJT,EAIS;iEAJQQ,iBAASK;IAIjB,CAJT;;IAAA,oBAAiBL,iBAMf,kBADFR,oBAAuC,OAAvC,EAAuC;MAAhCc,IAAI,EAAC,QAA2B;iEAATN,cAAMK;IAAG,CAAvC;;IAAA,kBAA8BL,cAC5B,CAPN;;IAAA,CAOM,CARQ;;;;GADtB;;EAAA","names":["ref","class","_createElementVNode","value","_hoisted_2","_hoisted_3","_hoisted_4","_createBlock","_component_NodeTemplate","onClick","_ctx","title","firstColor","secondColor","content","$event","type"],"sourceRoot":"","sources":["/Users/juancamiloespinosa/Desktop/truilder/src/components/Board/Nodes/NodeIf.vue"],"sourcesContent":["<template>\n    <NodeTemplate @click=\"addNode\" title=\"If\" firstColor='e0d74c' secondColor=\"ffef00\">\n        <template #content>\n            <div ref=\"node\" class=\"node\">\n                <select v-model=\"condition\">\n                    <option value=\"equal\">Equal to</option>\n                    <option value=\"greater\">Greater than</option>\n                    <option value=\"smaller\">Smaller than</option>\n                </select>\n                <input type=\"number\" v-model=\"number\"/>\n            </div>\n        </template>\n    </NodeTemplate>\n</template>\n\n<script setup>\nimport { defineEmits, defineProps, onMounted, ref, nextTick } from 'vue';\nimport NodeTemplate from '@/components/Board/Nodes/NodeTemplate.vue'\n\nconst values = {\n    'name': 'if',\n    'inputs': 1,\n    'outputs': 2,\n    'node': 'nodeIf'\n}\n\nconst props = defineProps({\n    editor: {\n        type: Object,\n    }\n})\n\nlet node = ref(null);\nlet id = ref(0);\n\nconst variableName = ref();\n\nconst condition = ref(\"equal\")\nconst number = ref(0)\n\nconst emit = defineEmits([\"addNode\"]);\nconst addNode = () => emit('addNode', values)\n\nconst updateData = () => {\n    const obj = {...props.editor.getNodeFromId(id).data};\n    obj['output'] = variableName.value;\n    \n    const input1 = obj['input_1']\n    const input2 = obj['input_2']\n    obj['python'] = `${variableName.value} = ${input1} + ${input2}`\n    props.editor.updateNodeDataFromId(id, obj)\n}\n\nonMounted(async () => {\n    await nextTick();\n    id = node.value.parentElement.parentElement.parentElement.id.split('-')[1];\n    props.editor.on('connectionCreated', connection => connectionCreated(connection))\n});\n\nconst connectionCreated = (connection) => {\n    if(connection.input_id == id){\n        const obj = {...props.editor.getNodeFromId(id).data}\n        obj['condition'] = condition.value == 'equal' ? `if ${obj.input_1} == ${number.value}:` : condition.value == 'greater' ? `if ${obj.input_1} > ${number.value}:` : `if ${obj.input_1} < ${number.value}:`\n        obj.yes_path != undefined && obj.no_path != undefined ? obj['python'] = `${condition}\\n  ${obj.yes_path}\\nelse:\\n   ${obj.no_path}` : obj.yes_path != undefined && obj.no_path == undefined ? obj['python'] = `${condition}\\n  ${obj.yes_path}\\n` : {}\n    }else if(connection.output_id == id){\n        const obj = {...props.editor.getNodeFromId(id).data}\n        obj['yes_path'] : \n    }\n    \n}\n</script>\n\n<style scoped>\n.variable-name, .number {\n    margin: 4px 0 4px 0;\n    padding: 4px 6px 4px 6px;\n    border-radius: 5px;\n    border: none;\n}\n.node {\n    box-sizing: border-box;\n    display: grid;\n    grid-template-columns: 2fr 1fr;\n    column-gap: 5px;\n}\n.node:hover{\n    cursor: move;\n}\np {\n    padding-left: 4px;\n    color: white;\n}\n</style>"]},"metadata":{},"sourceType":"module"}