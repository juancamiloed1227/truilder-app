{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"p\", null, \"Hello World\");\n}","map":{"version":3,"mappings":";;uBACIA,oBAAkB,GAAlB,EAAkB,IAAlB,EAAG,aAAH","names":["_createElementBlock"],"sourceRoot":"","sources":["/Users/juancamiloespinosa/Desktop/Juan Camilo/platzi/TR/drawflow-test/src/components/Home.vue"],"sourcesContent":["<template>\n    <p>Hello World</p>\n</template>\n\n<script>\nimport Drawflow from 'drawflow'\nimport styleDrawflow from 'drawflow/dist/drawflow.min.css'\nimport style from '../assets/style.css' \nimport { onMounted, shallowRef, h, getCurrentInstance, render, readonly, ref } from 'vue'\nimport Node1 from './nodes/node1.vue'\nimport Node2 from './nodes/node2.vue'\nimport Node3 from './nodes/node3.vue'\nexport default {\n  name: 'drawflow',\n  setup() {\n   const listNodes = readonly([\n        {\n            name: 'Get/Post',\n            color: '#49494970',\n            item: 'Node1',\n            input:0,\n            output:1\n        },\n        {\n            name: 'Script',\n            color: 'blue',\n            item: 'Node2',\n            input:1,\n            output:2\n        },\n         {\n            name: 'console.log',\n            color: '#ff9900',\n            item: 'Node3',\n            input:1,\n            output:0\n        },\n    ])\n   \n   const editor = shallowRef({})\n   const dialogVisible = ref(false)\n   const dialogData = ref({})\n   const Vue = { version: 3, h, render };\n   const internalInstance = getCurrentInstance()\n   internalInstance.appContext.app._context.config.globalProperties.$df = editor;\n   \n    function exportEditor() {\n      dialogData.value = editor.value.export();\n      dialogVisible.value = true;\n    }\n    const drag = (ev) => {\n      if (ev.type === \"touchstart\") {\n        mobile_item_selec = ev.target.closest(\".drag-drawflow\").getAttribute('data-node');\n      } else {\n      ev.dataTransfer.setData(\"node\", ev.target.getAttribute('data-node'));\n      }\n    }\n    const drop = (ev) => {\n      if (ev.type === \"touchend\") {\n        var parentdrawflow = document.elementFromPoint( mobile_last_move.touches[0].clientX, mobile_last_move.touches[0].clientY).closest(\"#drawflow\");\n        if(parentdrawflow != null) {\n          addNodeToDrawFlow(mobile_item_selec, mobile_last_move.touches[0].clientX, mobile_last_move.touches[0].clientY);\n        }\n        mobile_item_selec = '';\n      } else {\n        ev.preventDefault();\n        var data = ev.dataTransfer.getData(\"node\");\n        addNodeToDrawFlow(data, ev.clientX, ev.clientY);\n      }\n    }\n    const allowDrop = (ev) => {\n      ev.preventDefault();\n    }\n   let mobile_item_selec = '';\n   let mobile_last_move = null;\n   function positionMobile(ev) {\n     mobile_last_move = ev;\n   }\n    function addNodeToDrawFlow(name, pos_x, pos_y) {\n      pos_x = pos_x * ( editor.value.precanvas.clientWidth / (editor.value.precanvas.clientWidth * editor.value.zoom)) - (editor.value.precanvas.getBoundingClientRect().x * ( editor.value.precanvas.clientWidth / (editor.value.precanvas.clientWidth * editor.value.zoom)));\n      pos_y = pos_y * ( editor.value.precanvas.clientHeight / (editor.value.precanvas.clientHeight * editor.value.zoom)) - (editor.value.precanvas.getBoundingClientRect().y * ( editor.value.precanvas.clientHeight / (editor.value.precanvas.clientHeight * editor.value.zoom)));\n    \n      const nodeSelected = listNodes.find(ele => ele.item == name);\n      editor.value.addNode(name, nodeSelected.input,  nodeSelected.output, pos_x, pos_y, name, {}, name, 'vue');\n      \n    }\n   onMounted(() => {\n      var elements = document.getElementsByClassName('drag-drawflow');\n      for (var i = 0; i < elements.length; i++) {\n        elements[i].addEventListener('touchend', drop, false);\n        elements[i].addEventListener('touchmove', positionMobile, false);\n        elements[i].addEventListener('touchstart', drag, false );\n      }\n        \n       const id = document.getElementById(\"drawflow\");\n       editor.value = new Drawflow(id, Vue, internalInstance.appContext.app._context);\n       editor.value.start();\n       \n       editor.value.registerNode('Node1', Node1, {}, {});\n       editor.value.registerNode('Node2', Node2, {}, {});\n       editor.value.registerNode('Node3', Node3, {}, {});\n       editor.value.import({\"drawflow\":{\"Home\":{\"data\":{\"5\":{\"id\":5,\"name\":\"Node2\",\"data\":{\"script\":\"(req,res) => {\\n console.log(req);\\n}\"},\"class\":\"Node2\",\"html\":\"Node2\",\"typenode\":\"vue\",\"inputs\":{\"input_1\":{\"connections\":[{\"node\":\"6\",\"input\":\"output_1\"}]}},\"outputs\":{\"output_1\":{\"connections\":[]},\"output_2\":{\"connections\":[]}},\"pos_x\":1000,\"pos_y\":117},\"6\":{\"id\":6,\"name\":\"Node1\",\"data\":{\"url\":\"localhost/add\", \"method\": \"post\"},\"class\":\"Node1\",\"html\":\"Node1\",\"typenode\":\"vue\",\"inputs\":{},\"outputs\":{\"output_1\":{\"connections\":[{\"node\":\"5\",\"output\":\"input_1\"}]}},\"pos_x\":137,\"pos_y\":89}}}}})\n  })\n  return {\n    exportEditor, listNodes, drag, drop, allowDrop, dialogVisible, dialogData\n  }\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module"}