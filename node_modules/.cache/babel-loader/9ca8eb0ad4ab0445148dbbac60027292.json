{"ast":null,"code":"import { onMounted, ref, nextTick } from 'vue';\nimport NodeTemplate from '@/components/Board/Nodes/NodeTemplate.vue';\nexport default {\n  __name: 'NodePrint',\n  props: {\n    editor: {\n      type: Object\n    }\n  },\n  emits: [\"addNode\"],\n\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    expose();\n    const props = __props;\n    const values = {\n      'name': 'print',\n      'inputs': 1,\n      'outputs': 0,\n      'node': 'nodePrint'\n    };\n    let node = ref(null);\n    let id = ref(0);\n    const text = ref();\n    const variable = ref();\n\n    const addNode = () => emit('addNode', values);\n\n    const updateData = () => {\n      const data = props.editor.getNodeFromId(id).data;\n      const obj = { ...data\n      };\n      obj['python'] = text != undefined && variable != undefined ? `print('${text.value}', ${variable.value})` : text != undefined && variable == undefined ? `print('${text.value}')` : text == undefined && variable != undefined ? `print(${variable.value})` : `print('')`;\n      props.editor.updateNodeDataFromId(id, obj);\n    };\n\n    onMounted(async () => {\n      await nextTick();\n      id = node.value.parentElement.parentElement.parentElement.id.split('-')[1];\n    });\n    const __returned__ = {\n      values,\n      props,\n      node,\n      id,\n      text,\n      variable,\n      emit,\n      addNode,\n      updateData,\n      onMounted,\n      ref,\n      nextTick,\n      NodeTemplate\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n\n};","map":{"version":3,"mappings":"AAYA,SAAmCA,SAAnC,EAA8CC,GAA9C,EAAmDC,QAAnD,QAAkE,KAAlE;AACA,OAAOC,YAAP,MAAyB,2CAAzB;;;;;;;;;;;;;;;;IAEA,MAAMC,MAAM,GAAG;MACX,QAAQ,OADG;MAEX,UAAU,CAFC;MAGX,WAAW,CAHA;MAIX,QAAQ;IAJG,CAAf;IAaA,IAAIC,IAAI,GAAGJ,GAAG,CAAC,IAAD,CAAd;IACA,IAAIK,EAAE,GAAGL,GAAG,CAAC,CAAD,CAAZ;IAEA,MAAMM,IAAI,GAAGN,GAAG,EAAhB;IACA,MAAMO,QAAQ,GAAGP,GAAG,EAApB;;IAGA,MAAMQ,OAAO,GAAG,MAAMC,IAAI,CAAC,SAAD,EAAYN,MAAZ,CAA1B;;IAEA,MAAMO,UAAU,GAAG,MAAM;MACrB,MAAMC,IAAI,GAAGC,KAAK,CAACC,MAAN,CAAaC,aAAb,CAA2BT,EAA3B,EAA+BM,IAA5C;MACA,MAAMI,GAAG,GAAG,EAAC,GAAGJ;MAAJ,CAAZ;MACAI,GAAG,CAAC,QAAD,CAAH,GAAgBT,IAAI,IAAIU,SAAR,IAAqBT,QAAQ,IAAIS,SAAjC,GAA8C,UAASV,IAAI,CAACW,KAAM,MAAKV,QAAQ,CAACU,KAAM,GAAtF,GAA2FX,IAAI,IAAIU,SAAR,IAAqBT,QAAQ,IAAIS,SAAjC,GAA8C,UAASV,IAAI,CAACW,KAAM,IAAlE,GAAwEX,IAAI,IAAIU,SAAR,IAAqBT,QAAQ,IAAIS,SAAjC,GAA8C,SAAQT,QAAQ,CAACU,KAAM,GAArE,GAA2E,WAA9P;MACAL,KAAK,CAACC,MAAN,CAAaK,oBAAb,CAAkCb,EAAlC,EAAsCU,GAAtC;IACH,CALD;;IAOAhB,SAAS,CAAC,YAAY;MAClB,MAAME,QAAQ,EAAd;MACAI,EAAE,GAAGD,IAAI,CAACa,KAAL,CAAWE,aAAX,CAAyBA,aAAzB,CAAuCA,aAAvC,CAAqDd,EAArD,CAAwDe,KAAxD,CAA8D,GAA9D,EAAmE,CAAnE,CAAL;IACH,CAHQ,CAAT","names":["onMounted","ref","nextTick","NodeTemplate","values","node","id","text","variable","addNode","emit","updateData","data","props","editor","getNodeFromId","obj","undefined","value","updateNodeDataFromId","parentElement","split"],"sources":["/Users/juancamiloespinosa/Desktop/truilder/src/components/Board/Nodes/NodePrint.vue"],"sourcesContent":["<template>\n    <NodeTemplate @click=\"addNode\" title=\"Print\" firstColor='79E0C2' secondColor=\"00E5A3\">\n        <template #content>\n            <div ref=\"node\" class=\"node\">\n                <input @change=\"updateData\" type=\"text\" v-model=\"text\" placeholder=\"Text(optional)\">\n                <input @change=\"updateData\" type=\"text\" v-model=\"variable\"/>\n            </div>\n        </template>\n    </NodeTemplate>\n</template>\n\n<script setup>\nimport { defineEmits, defineProps, onMounted, ref, nextTick} from 'vue';\nimport NodeTemplate from '@/components/Board/Nodes/NodeTemplate.vue'\n\nconst values = {\n    'name': 'print',\n    'inputs': 1,\n    'outputs': 0,\n    'node': 'nodePrint'\n}\n\nconst props = defineProps({\n    editor: {\n        type: Object,\n    }\n})\n\nlet node = ref(null);\nlet id = ref(0);\n\nconst text = ref()\nconst variable = ref()\n\nconst emit = defineEmits([\"addNode\"]);\nconst addNode = () => emit('addNode', values)\n\nconst updateData = () => {\n    const data = props.editor.getNodeFromId(id).data\n    const obj = {...data}\n    obj['python'] = text != undefined && variable != undefined ? `print('${text.value}', ${variable.value})` : text != undefined && variable == undefined ? `print('${text.value}')` : text == undefined && variable != undefined ? `print(${variable.value})` : `print('')`\n    props.editor.updateNodeDataFromId(id, obj)\n}\n\nonMounted(async () => {\n    await nextTick();\n    id = node.value.parentElement.parentElement.parentElement.id.split('-')[1];\n});\n</script>\n\n<style>\n.node {\n    box-sizing: border-box;\n}\n.node:hover{\n    cursor: move;\n}\n</style>"]},"metadata":{},"sourceType":"module"}