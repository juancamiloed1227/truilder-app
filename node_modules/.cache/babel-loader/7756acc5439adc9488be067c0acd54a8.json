{"ast":null,"code":"import { onMounted, ref, nextTick } from 'vue';\nimport NodeTemplate from '@/components/Board/Nodes/NodeTemplate.vue';\nexport default {\n  __name: 'NodeBlock',\n  props: {\n    editor: {\n      type: Object\n    }\n  },\n  emits: [\"addNode\"],\n\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    expose();\n    const props = __props;\n    const values = {\n      'name': 'block',\n      'inputs': 1,\n      'outputs': 1,\n      'node': 'nodeBlock'\n    };\n    let node = ref(null);\n    let id = ref(0);\n\n    const addNode = () => emit('addNode', values);\n\n    const addOutput = () => props.editor.addNodeOutput(id);\n\n    const removeOutput = () => {\n      const node = props.editor.getNodeFromId(id);\n      const keys = Object.keys(node.outputs);\n      props.editor.removeNodeOutput(id, keys[keys.length - 1]);\n    };\n\n    onMounted(async () => {\n      await nextTick();\n      id = node.value.parentElement.parentElement.parentElement.id.split('-')[1];\n      props.editor.on('connectionCreated', connection => connectionCreated(connection));\n      editor.value.on('nodeSelected', id => nodeSelected(id));\n      editor.value.on('nodeUnselected', function () {\n        const node_outputs = editor.value.getNodeFromId(selectedNode.value).outputs;\n        const keys = Object.keys(node_outputs);\n\n        for (let i = 0; i < keys.length; i++) {\n          let key = keys[i];\n          node_outputs[key].connections.forEach(connection => {\n            let obj = { ...editor.value.getNodeFromId(connection.node).data\n            };\n            obj[connection.output] = editor.value.getNodeFromId(selectedNode.value).data.output;\n            editor.value.updateNodeDataFromId(connection.node, obj);\n          });\n        }\n      });\n    });\n\n    const connectionCreated = connection => {\n      if (connection.output_id == id) {\n        const input_node = props.editor.getNodeFromId(connection.input_id);\n        const output_node = props.editor.getNodeFromId(connection.output_id);\n        input_node.class == 'add' && Object.keys(input_node.inputs).length == 2 ? props.editor.addNodeInput(connection.input_id) : {};\n        const obj = { ...output_node.data\n        };\n\n        if (input_node.data.python != undefined) {\n          const output_class = connection.output_class;\n          obj[output_class] = input_node.data.python;\n          props.editor.updateNodeDataFromId(id, obj);\n          const input_data = { ...input_node.data\n          };\n          input_data['convertible'] = false;\n          props.editor.updateNodeDataFromId(connection.input_id, input_data);\n        }\n\n        let pythonCode = '';\n        const keys = Object.keys(obj);\n\n        for (let i = 0; i < keys.length; i++) {\n          const key = keys[i];\n\n          if (key != 'python' && key != 'convertible') {\n            i != keys.length - 1 ? pythonCode += `${obj[key]}\\n` : pythonCode += `${obj[key]}`;\n          }\n        }\n\n        obj['python'] = pythonCode;\n      }\n\n      if (connection.input_id == id) {\n        const obj = { ...props.editor.getNodeFromId(id).data\n        };\n        obj['convertible'] = false;\n        props.editor.updateNodeDataFromId(id, obj);\n      }\n    };\n\n    const nodeDataChanged = () => {\n      console.log('Hola');\n    };\n\n    const __returned__ = {\n      values,\n      props,\n      node,\n      id,\n      emit,\n      addNode,\n      addOutput,\n      removeOutput,\n      connectionCreated,\n      nodeDataChanged,\n      onMounted,\n      ref,\n      nextTick,\n      NodeTemplate\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n\n};","map":{"version":3,"mappings":"AAYA,SAAmCA,SAAnC,EAA8CC,GAA9C,EAAmDC,QAAnD,QAAmE,KAAnE;AACA,OAAOC,YAAP,MAAyB,2CAAzB;;;;;;;;;;;;;;;;IAEA,MAAMC,MAAM,GAAG;MACX,QAAQ,OADG;MAEX,UAAU,CAFC;MAGX,WAAW,CAHA;MAIX,QAAQ;IAJG,CAAf;IAaA,IAAIC,IAAI,GAAGJ,GAAG,CAAC,IAAD,CAAd;IACA,IAAIK,EAAE,GAAGL,GAAG,CAAC,CAAD,CAAZ;;IAGA,MAAMM,OAAO,GAAG,MAAMC,IAAI,CAAC,SAAD,EAAYJ,MAAZ,CAA1B;;IAEA,MAAMK,SAAS,GAAG,MAAMC,KAAK,CAACC,MAAN,CAAaC,aAAb,CAA2BN,EAA3B,CAAxB;;IACA,MAAMO,YAAY,GAAG,MAAM;MACvB,MAAMR,IAAI,GAAGK,KAAK,CAACC,MAAN,CAAaG,aAAb,CAA2BR,EAA3B,CAAb;MACA,MAAMS,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYV,IAAI,CAACY,OAAjB,CAAb;MACAP,KAAK,CAACC,MAAN,CAAaO,gBAAb,CAA8BZ,EAA9B,EAAkCS,IAAI,CAACA,IAAI,CAACI,MAAL,GAAY,CAAb,CAAtC;IACH,CAJD;;IAMAnB,SAAS,CAAC,YAAY;MAClB,MAAME,QAAQ,EAAd;MACAI,EAAE,GAAGD,IAAI,CAACe,KAAL,CAAWC,aAAX,CAAyBA,aAAzB,CAAuCA,aAAvC,CAAqDf,EAArD,CAAwDgB,KAAxD,CAA8D,GAA9D,EAAmE,CAAnE,CAAL;MACAZ,KAAK,CAACC,MAAN,CAAaY,EAAb,CAAgB,mBAAhB,EAAqCC,UAAU,IAAIC,iBAAiB,CAACD,UAAD,CAApE;MACAb,MAAM,CAACS,KAAP,CAAaG,EAAb,CAAgB,cAAhB,EAAgCjB,EAAE,IAAIoB,YAAY,CAACpB,EAAD,CAAlD;MACAK,MAAM,CAACS,KAAP,CAAaG,EAAb,CAAgB,gBAAhB,EAAkC,YAAW;QAC3C,MAAMI,YAAY,GAAGhB,MAAM,CAACS,KAAP,CAAaN,aAAb,CAA2Bc,YAAY,CAACR,KAAxC,EAA+CH,OAApE;QACA,MAAMF,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYY,YAAZ,CAAb;;QAEA,KAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGd,IAAI,CAACI,MAAxB,EAAgCU,CAAC,EAAjC,EAAoC;UAClC,IAAIC,GAAG,GAAGf,IAAI,CAACc,CAAD,CAAd;UAEAF,YAAY,CAACG,GAAD,CAAZ,CAAkBC,WAAlB,CAA8BC,OAA9B,CAAsCR,UAAU,IAAI;YAClD,IAAIS,GAAG,GAAG,EAAC,GAAGtB,MAAM,CAACS,KAAP,CAAaN,aAAb,CAA2BU,UAAU,CAACnB,IAAtC,EAA4C6B;YAAhD,CAAV;YACAD,GAAG,CAACT,UAAU,CAACW,MAAZ,CAAH,GAAyBxB,MAAM,CAACS,KAAP,CAAaN,aAAb,CAA2Bc,YAAY,CAACR,KAAxC,EAA+Cc,IAA/C,CAAoDC,MAA7E;YACAxB,MAAM,CAACS,KAAP,CAAagB,oBAAb,CAAkCZ,UAAU,CAACnB,IAA7C,EAAmD4B,GAAnD;UACD,CAJD;QAKD;MACF,CAbD;IAcH,CAnBQ,CAAT;;IAqBA,MAAMR,iBAAiB,GAAID,UAAD,IAAgB;MACtC,IAAGA,UAAU,CAACa,SAAX,IAAwB/B,EAA3B,EAA8B;QAC1B,MAAMgC,UAAU,GAAG5B,KAAK,CAACC,MAAN,CAAaG,aAAb,CAA2BU,UAAU,CAACe,QAAtC,CAAnB;QACA,MAAMC,WAAW,GAAG9B,KAAK,CAACC,MAAN,CAAaG,aAAb,CAA2BU,UAAU,CAACa,SAAtC,CAApB;QACAC,UAAU,CAACG,KAAX,IAAoB,KAApB,IAA6BzB,MAAM,CAACD,IAAP,CAAYuB,UAAU,CAACI,MAAvB,EAA+BvB,MAA/B,IAAyC,CAAtE,GAA0ET,KAAK,CAACC,MAAN,CAAagC,YAAb,CAA0BnB,UAAU,CAACe,QAArC,CAA1E,GAA2H,EAA3H;QAEA,MAAMN,GAAG,GAAG,EAAC,GAAGO,WAAW,CAACN;QAAhB,CAAZ;;QACA,IAAII,UAAU,CAACJ,IAAX,CAAgBU,MAAhB,IAA0BC,SAA9B,EAAwC;UACpC,MAAMC,YAAY,GAAGtB,UAAU,CAACsB,YAAhC;UACAb,GAAG,CAACa,YAAD,CAAH,GAAoBR,UAAU,CAACJ,IAAX,CAAgBU,MAApC;UACAlC,KAAK,CAACC,MAAN,CAAayB,oBAAb,CAAkC9B,EAAlC,EAAsC2B,GAAtC;UAEA,MAAMc,UAAU,GAAG,EAAC,GAAGT,UAAU,CAACJ;UAAf,CAAnB;UACAa,UAAU,CAAC,aAAD,CAAV,GAA4B,KAA5B;UACArC,KAAK,CAACC,MAAN,CAAayB,oBAAb,CAAkCZ,UAAU,CAACe,QAA7C,EAAuDQ,UAAvD;QACH;;QAED,IAAIC,UAAU,GAAG,EAAjB;QACA,MAAMjC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYkB,GAAZ,CAAb;;QACA,KAAI,IAAIJ,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGd,IAAI,CAACI,MAAxB,EAAgCU,CAAC,EAAjC,EAAoC;UAChC,MAAMC,GAAG,GAAGf,IAAI,CAACc,CAAD,CAAhB;;UACA,IAAGC,GAAG,IAAI,QAAP,IAAmBA,GAAG,IAAI,aAA7B,EAA2C;YACvCD,CAAC,IAAId,IAAI,CAACI,MAAL,GAAa,CAAlB,GAAsB6B,UAAU,IAAK,GAAEf,GAAG,CAACH,GAAD,CAAM,IAAhD,GAAsDkB,UAAU,IAAK,GAAEf,GAAG,CAACH,GAAD,CAAM,EAAhF;UACH;QACJ;;QACDG,GAAG,CAAC,QAAD,CAAH,GAAgBe,UAAhB;MACH;;MACD,IAAGxB,UAAU,CAACe,QAAX,IAAuBjC,EAA1B,EAA6B;QACzB,MAAM2B,GAAG,GAAG,EAAC,GAAGvB,KAAK,CAACC,MAAN,CAAaG,aAAb,CAA2BR,EAA3B,EAA+B4B;QAAnC,CAAZ;QACAD,GAAG,CAAC,aAAD,CAAH,GAAqB,KAArB;QACAvB,KAAK,CAACC,MAAN,CAAayB,oBAAb,CAAkC9B,EAAlC,EAAsC2B,GAAtC;MACH;IACJ,CAhCD;;IAkCA,MAAMgB,eAAe,GAAG,MAAM;MAC1BC,OAAO,CAACC,GAAR,CAAY,MAAZ;IACH,CAFD","names":["onMounted","ref","nextTick","NodeTemplate","values","node","id","addNode","emit","addOutput","props","editor","addNodeOutput","removeOutput","getNodeFromId","keys","Object","outputs","removeNodeOutput","length","value","parentElement","split","on","connection","connectionCreated","nodeSelected","node_outputs","selectedNode","i","key","connections","forEach","obj","data","output","updateNodeDataFromId","output_id","input_node","input_id","output_node","class","inputs","addNodeInput","python","undefined","output_class","input_data","pythonCode","nodeDataChanged","console","log"],"sources":["/Users/juancamiloespinosa/Desktop/truilder/src/components/Board/Nodes/NodeBlock.vue"],"sourcesContent":["<template>\n    <NodeTemplate @click=\"addNode\" title=\"Block of code\" firstColor='e0d74c' secondColor=\"ffef00\">\n        <template #content>\n            <div ref=\"node\" class=\"node\">\n                <button @click=\"addOutput\">Add step</button>\n                <button @click=\"removeOutput\">Remove step</button>\n            </div>\n        </template>\n    </NodeTemplate>\n</template>\n\n<script setup>\nimport { defineEmits, defineProps, onMounted, ref, nextTick } from 'vue';\nimport NodeTemplate from '@/components/Board/Nodes/NodeTemplate.vue'\n\nconst values = {\n    'name': 'block',\n    'inputs': 1,\n    'outputs': 1,\n    'node': 'nodeBlock'\n}\n\nconst props = defineProps({\n    editor: {\n        type: Object,\n    }\n})\n\nlet node = ref(null);\nlet id = ref(0);\n\nconst emit = defineEmits([\"addNode\"]);\nconst addNode = () => emit('addNode', values)\n\nconst addOutput = () => props.editor.addNodeOutput(id)\nconst removeOutput = () => {\n    const node = props.editor.getNodeFromId(id)\n    const keys = Object.keys(node.outputs);\n    props.editor.removeNodeOutput(id, keys[keys.length-1])\n}\n\nonMounted(async () => {\n    await nextTick();\n    id = node.value.parentElement.parentElement.parentElement.id.split('-')[1];\n    props.editor.on('connectionCreated', connection => connectionCreated(connection))\n    editor.value.on('nodeSelected', id => nodeSelected(id))\n    editor.value.on('nodeUnselected', function() {\n      const node_outputs = editor.value.getNodeFromId(selectedNode.value).outputs\n      const keys = Object.keys(node_outputs)\n\n      for(let i = 0; i < keys.length; i++){\n        let key = keys[i]\n        \n        node_outputs[key].connections.forEach(connection => {\n          let obj = {...editor.value.getNodeFromId(connection.node).data};\n          obj[connection.output] = editor.value.getNodeFromId(selectedNode.value).data.output;\n          editor.value.updateNodeDataFromId(connection.node, obj)\n        }); \n      }\n    })\n});\n\nconst connectionCreated = (connection) => {\n    if(connection.output_id == id){\n        const input_node = props.editor.getNodeFromId(connection.input_id)\n        const output_node = props.editor.getNodeFromId(connection.output_id)\n        input_node.class == 'add' && Object.keys(input_node.inputs).length == 2 ? props.editor.addNodeInput(connection.input_id) : {}\n        \n        const obj = {...output_node.data}\n        if (input_node.data.python != undefined){\n            const output_class = connection.output_class\n            obj[output_class] = input_node.data.python\n            props.editor.updateNodeDataFromId(id, obj)\n\n            const input_data = {...input_node.data}\n            input_data['convertible'] = false\n            props.editor.updateNodeDataFromId(connection.input_id, input_data)\n        }\n        \n        let pythonCode = ''\n        const keys = Object.keys(obj)\n        for(let i = 0; i < keys.length; i++){\n            const key = keys[i]\n            if(key != 'python' && key != 'convertible'){\n                i != keys.length -1 ? pythonCode += `${obj[key]}\\n` : pythonCode += `${obj[key]}`\n            }\n        }\n        obj['python'] = pythonCode\n    }\n    if(connection.input_id == id){\n        const obj = {...props.editor.getNodeFromId(id).data}\n        obj['convertible'] = false\n        props.editor.updateNodeDataFromId(id, obj)\n    }\n} \n\nconst nodeDataChanged = () => {\n    console.log('Hola')\n}\n</script>\n\n<style scoped>\n.variable-name, .number {\n    margin: 4px 0 4px 0;\n    padding: 4px 6px 4px 6px;\n    border-radius: 5px;\n    border: none;\n}\n.node {\n    box-sizing: border-box;\n}\n.node:hover{\n    cursor: move;\n}\np {\n    padding-left: 4px;\n    color: white;\n}\nbutton {\n    width: 100%;\n    border: none;\n    background: white;\n    padding: 5px 3px 5px 3px;\n    margin-bottom: 5px;\n    border-radius: 10px;\n    color: #222222;\n}\n</style>"]},"metadata":{},"sourceType":"module"}