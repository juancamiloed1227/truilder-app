{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-7d827338\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  ref: \"node\",\n  class: \"node\"\n};\nexport function render(_ctx, _cache) {\n  const _component_NodeTemplate = _resolveComponent(\"NodeTemplate\");\n\n  return _openBlock(), _createBlock(_component_NodeTemplate, {\n    onClick: _ctx.addNode,\n    title: \"Block of code\",\n    firstColor: \"e0d74c\",\n    secondColor: \"ffef00\"\n  }, {\n    content: _withCtx(() => [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"button\", {\n      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.addOutput && _ctx.addOutput(...args))\n    }, \"Add step\"), _createElementVNode(\"button\", {\n      onClick: _cache[1] || (_cache[1] = (...args) => _ctx.removeOutput && _ctx.removeOutput(...args))\n    }, \"Remove step\")], 512\n    /* NEED_PATCH */\n    )]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"onClick\"]);\n}","map":{"version":3,"mappings":";;;;;EAGiBA,GAAG,EAAC;EAAOC,KAAK,EAAC;;;;;uBAF9BC,aAOeC,uBAPf,EAOe;IAPAC,OAAK,EAAEC,YAOP;IAPgBC,KAAK,EAAC,eAOtB;IAPsCC,UAAU,EAAC,QAOjD;IAP0DC,WAAW,EAAC;EAOtE,CAPf;IACeC,OAAO,WACd,MAGM,CAHNC,oBAGM,KAHN,cAGM,CAFFA,oBAA4C,QAA5C,EAA4C;MAAnCN,OAAK,yCAAEC,yCAAF;IAA8B,CAA5C,EAA2B,UAA3B,CAEE,EADFK,oBAAkD,QAAlD,EAAkD;MAAzCN,OAAK,yCAAEC,+CAAF;IAAoC,CAAlD,EAA8B,aAA9B,CACE,CAHN;;IAAA,CAGM,CAJQ;;;;GADtB;;EAAA","names":["ref","class","_createBlock","_component_NodeTemplate","onClick","_ctx","title","firstColor","secondColor","content","_createElementVNode"],"sourceRoot":"","sources":["/Users/juancamiloespinosa/Desktop/truilder/src/components/Board/Nodes/NodeBlock.vue"],"sourcesContent":["<template>\n    <NodeTemplate @click=\"addNode\" title=\"Block of code\" firstColor='e0d74c' secondColor=\"ffef00\">\n        <template #content>\n            <div ref=\"node\" class=\"node\">\n                <button @click=\"addOutput\">Add step</button>\n                <button @click=\"removeOutput\">Remove step</button>\n            </div>\n        </template>\n    </NodeTemplate>\n</template>\n\n<script setup>\nimport { defineEmits, defineProps, onMounted, ref, nextTick } from 'vue';\nimport NodeTemplate from '@/components/Board/Nodes/NodeTemplate.vue'\n\nconst values = {\n    'name': 'block',\n    'inputs': 1,\n    'outputs': 1,\n    'node': 'nodeBlock'\n}\n\nconst props = defineProps({\n    editor: {\n        type: Object,\n    }\n})\n\nlet node = ref(null);\nlet id = ref(0);\n\nconst emit = defineEmits([\"addNode\"]);\nconst addNode = () => emit('addNode', values)\n\nconst addOutput = () => props.editor.addNodeOutput(id)\nconst removeOutput = () => {\n    const node = props.editor.getNodeFromId(id)\n    const keys = Object.keys(node.outputs);\n    props.editor.removeNodeOutput(id, keys[keys.length-1])\n}\n\nonMounted(async () => {\n    await nextTick();\n    id = node.value.parentElement.parentElement.parentElement.id.split('-')[1];\n    props.editor.on('connectionCreated', connection => connectionCreated(connection))\n});\n\nconst connectionCreated = (connection) => {\n    if(connection.output_id == id){\n        const input_node = props.editor.getNodeFromId(connection.input_id)\n        const output_node = props.editor.getNodeFromId(connection.output_id)\n        input_node.class == 'add' && Object.keys(input_node.inputs).length == 2 ? props.editor.addNodeInput(connection.input_id) : {}\n\n        const obj = {...output_node.data}\n        if (input_node.data.python != undefined){\n            const output_class = connection.output_class\n            obj[output_class] = input_node.data.python\n            props.editor.updateNodeDataFromId(id, obj)\n\n            const input_data = {...input_node.data}\n            input_data['convertible'] = false\n            props.editor.updateNodeDataFromId(connection.input_id, input_data)\n        }\n        \n        for(let i = 0; i < Object.keys(obj); i++){\n            if\n        }\n\n    }\n} \n</script>\n\n<style scoped>\n.variable-name, .number {\n    margin: 4px 0 4px 0;\n    padding: 4px 6px 4px 6px;\n    border-radius: 5px;\n    border: none;\n}\n.node {\n    box-sizing: border-box;\n}\n.node:hover{\n    cursor: move;\n}\np {\n    padding-left: 4px;\n    color: white;\n}\nbutton {\n    width: 100%;\n    border: none;\n    background: white;\n    padding: 5px 3px 5px 3px;\n    margin-bottom: 5px;\n    border-radius: 10px;\n    color: #222222;\n}\n</style>"]},"metadata":{},"sourceType":"module"}