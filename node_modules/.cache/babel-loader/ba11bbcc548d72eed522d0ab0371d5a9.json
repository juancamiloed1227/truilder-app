{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, resolveComponent as _resolveComponent, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"node\",\n  class: \"node\"\n};\nexport function render(_ctx, _cache) {\n  const _component_NodeTemplate = _resolveComponent(\"NodeTemplate\");\n\n  return _openBlock(), _createBlock(_component_NodeTemplate, {\n    onClick: _ctx.addNode,\n    title: \"Print\",\n    firstColor: \"79E0C2\",\n    secondColor: \"00E5A3\"\n  }, {\n    content: _withCtx(() => [_createElementVNode(\"div\", _hoisted_1, [_withDirectives(_createElementVNode(\"input\", {\n      onChange: _cache[0] || (_cache[0] = (...args) => _ctx.updateData && _ctx.updateData(...args)),\n      type: \"text\",\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.text = $event)\n    }, null, 544\n    /* HYDRATE_EVENTS, NEED_PATCH */\n    ), [[_vModelText, _ctx.text]]), _withDirectives(_createElementVNode(\"input\", {\n      onChange: _cache[2] || (_cache[2] = (...args) => _ctx.updateData && _ctx.updateData(...args)),\n      type: \"text\",\n      \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => _ctx.variable = $event)\n    }, null, 544\n    /* HYDRATE_EVENTS, NEED_PATCH */\n    ), [[_vModelText, _ctx.variable]])], 512\n    /* NEED_PATCH */\n    )]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"onClick\"]);\n}","map":{"version":3,"mappings":";;EAGiBA,GAAG,EAAC;EAAOC,KAAK,EAAC;;;;;uBAF9BC,aAOeC,uBAPf,EAOe;IAPAC,OAAK,EAAEC,YAOP;IAPgBC,KAAK,EAAC,OAOtB;IAP8BC,UAAU,EAAC,QAOzC;IAPkDC,WAAW,EAAC;EAO9D,CAPf;IACeC,OAAO,WACd,MAGM,CAHNC,oBAGM,KAHN,cAGM,iBAFFA,oBAAuD,OAAvD,EAAuD;MAA/CC,QAAM,yCAAEN,2CAAF,CAAyC;MAA3BO,IAAI,EAAC,MAAsB;iEAANP,YAAIQ;IAAE,CAAvD;;IAAA,kBAAiDR,YAE/C,kBADFK,oBAA4D,OAA5D,EAA4D;MAApDC,QAAM,yCAAEN,2CAAF,CAA8C;MAAhCO,IAAI,EAAC,MAA2B;iEAAXP,gBAAQQ;IAAG,CAA5D;;IAAA,kBAAiDR,gBAC/C,CAHN;;IAAA,CAGM,CAJQ;;;;GADtB;;EAAA","names":["ref","class","_createBlock","_component_NodeTemplate","onClick","_ctx","title","firstColor","secondColor","content","_createElementVNode","onChange","type","$event"],"sourceRoot":"","sources":["/Users/juancamiloespinosa/Desktop/truilder/src/components/Board/Nodes/NodePrint.vue"],"sourcesContent":["<template>\n    <NodeTemplate @click=\"addNode\" title=\"Print\" firstColor='79E0C2' secondColor=\"00E5A3\">\n        <template #content>\n            <div ref=\"node\" class=\"node\">\n                <input @change=\"updateData\" type=\"text\" v-model=\"text\">\n                <input @change=\"updateData\" type=\"text\" v-model=\"variable\"/>\n            </div>\n        </template>\n    </NodeTemplate>\n</template>\n\n<script setup>\nimport { defineEmits, defineProps, onMounted, ref, nextTick} from 'vue';\nimport NodeTemplate from '@/components/Board/Nodes/NodeTemplate.vue'\n\nconst values = {\n    'name': 'print',\n    'inputs': 1,\n    'outputs': 0,\n    'node': 'nodePrint'\n}\n\nconst props = defineProps({\n    editor: {\n        type: Object,\n    }\n})\n\nlet node = ref(null);\nlet id = ref(0);\n\nconst text = ref()\nconst variable = ref()\n\nconst emit = defineEmits([\"addNode\"]);\nconst addNode = () => emit('addNode', values)\n\nconst updateData = () => {\n    const data = props.editor.getNodeFromId(id).data\n    const obj = {...data}\n    obj['python'] = text != undefined && variable != undefined ? `print('${text.value}, ${variable.value}')` : text != undefined && variable == undefined ? `print('${text.value}')` : text == undefined && variable != undefined ? `print(${variable.value})`\n}\n\nonMounted(async () => {\n    await nextTick();\n    id = node.value.parentElement.parentElement.parentElement.id.split('-')[1];\n});\n</script>\n\n<style>\n.node {\n    box-sizing: border-box;\n}\n.node:hover{\n    cursor: move;\n}\n</style>"]},"metadata":{},"sourceType":"module"}