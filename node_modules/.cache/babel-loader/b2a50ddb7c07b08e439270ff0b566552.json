{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-5e4b99c9\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  id: \"drawflow\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"mappings":";;;;;EACOA,EAAE,EAAC;;;uBAARC,oBAAyB,KAAzB","names":["id","_createElementBlock"],"sourceRoot":"","sources":["/Users/juancamiloespinosa/Desktop/Juan Camilo/platzi/TR/drawflow-test/src/components/Board/Index.vue"],"sourcesContent":["<template>\n  <div id=\"drawflow\"></div>\n</template>\n\n<script setup>\nimport Drawflow from 'drawflow'\nimport { onMounted, h, getCurrentInstance, render, inject } from 'vue'\nimport NodeNumber from './Nodes/NodeNumber';\nimport NodeAdd from './Nodes/NodeAdd.vue'\nimport NodePrint from './Nodes/NodePrint.vue'\n\nconst editor = inject('editor');\nconst Vue = { version: 3, h, render };\nconst instance = getCurrentInstance();\n\nlet selectedNode = 0;\n\nonMounted(() => {\n    const id = document.getElementById(\"drawflow\");\n    editor.value = new Drawflow(id, Vue, instance.appContext.app._context);\n    editor.value.start();\n\n    editor.value.reroute = true;\n\n    editor.value.on('connectionCreated', connection => connectionCreated(connection))\n    editor.value.on('connectionRemoved', connection => connectionRemoved(connection))\n    editor.value.on('nodeSelected', id => nodeSelected(id))\n    editor.value.on('nodeUnselected', console.log(selectedNode))\n\n    editor.value.registerNode('nodeNumber', NodeNumber, { 'editor': editor.value }, {});\n    editor.value.registerNode('nodeAdd', NodeAdd, { 'editor': editor.value }, {});\n    editor.value.registerNode('nodePrint', NodePrint, { 'editor': editor.value }, {});\n\n    editor.value.addNode('number', 0, 1, 100, 100, 'number', {}, 'nodeNumber', 'vue');\n});\n\nconst connectionCreated = (connection) => {\n  const inputNode  = editor.value.getNodeFromId(connection.input_id)\n  const outputNode = editor.value.getNodeFromId(connection.output_id)\n\n  const input_class = connection.input_class\n  const output = outputNode.data.output\n\n  const obj = {...inputNode.data }\n  obj[input_class] = output\n\n  output != undefined ? editor.value.updateNodeDataFromId(connection.input_id, obj) : {}\n}\n\nconst connectionRemoved = (connection) => {\n  const obj = {...editor.value.getNodeFromId(connection.input_id).data}\n  const input_class = connection.input_class\n\n  delete obj[input_class]\n  editor.value.updateNodeDataFromId(connection.input_id, obj)\n}\n\nconst nodeSelected = (id) => {\n  selectedNode = id\n  console.log(SelectedNode)\n}\n\n</script>\n\n<style scoped>\n#drawflow {\n  width: 100%;\n  height: 100%;\n  background-size: 20px 20px;\n  background-image: radial-gradient(#bebebe 1px, transparent 1px);\n}\n</style>"]},"metadata":{},"sourceType":"module"}