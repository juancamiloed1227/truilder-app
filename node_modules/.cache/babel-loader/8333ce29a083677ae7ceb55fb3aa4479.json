{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-5e4b99c9\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  id: \"drawflow\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"mappings":";;;;;EACSA,EAAE,EAAC;;;uBAARC,oBAAyB,KAAzB","names":["id","_createElementBlock"],"sourceRoot":"","sources":["/Users/juancamiloespinosa/Desktop/Juan Camilo/platzi/TR/drawflow-test/src/components/Board/Index.vue"],"sourcesContent":["<template>\n    <div id=\"drawflow\"></div>\n</template>\n\n<script setup>\nimport Drawflow from 'drawflow'\nimport { onMounted, shallowRef, h, getCurrentInstance, render } from 'vue'\n\nimport NodeNumber from './Nodes/NodeNumber';\n\nconst editor = shallowRef({});\nconst Vue = { version: 3, h, render };\nconst instance = getCurrentInstance();\n\nfunction exportEditor() {\n  dialogData.value = editor.value.export();\n  dialogVisible.value = true;\n}\n\nconst drag = (ev) => {\n  if (ev.type === \"touchstart\") {\n    mobile_item_selec = ev.target.closest(\".drag-drawflow\").getAttribute('data-node');\n  } else {\n    ev.dataTransfer.setData(\"node\", ev.target.getAttribute('data-node'));\n  }\n}\n\nconst drop = (ev) => {\n  if (ev.type === \"touchend\") {\n    var parentdrawflow = document.elementFromPoint( mobile_last_move.touches[0].clientX, mobile_last_move.touches[0].clientY).closest(\"#drawflow\");\n    if(parentdrawflow != null) {\n      addNodeToDrawFlow(mobile_item_selec, mobile_last_move.touches[0].clientX, mobile_last_move.touches[0].clientY);\n    }\n    mobile_item_selec = '';\n  } else {\n    ev.preventDefault();\n    var data = ev.dataTransfer.getData(\"node\");\n    addNodeToDrawFlow(data, ev.clientX, ev.clientY);\n  }\n}\n\nconst allowDrop = (ev) => {\n  ev.preventDefault();\n}\n\nlet mobile_item_selec = '';\nlet mobile_last_move = null;\n\nfunction positionMobile(ev) {\n  mobile_last_move = ev;\n}\n\nfunction addNodeToDrawFlow(name, pos_x, pos_y) {\n  pos_x = pos_x * ( editor.value.precanvas.clientWidth / (editor.value.precanvas.clientWidth * editor.value.zoom)) - (editor.value.precanvas.getBoundingClientRect().x * ( editor.value.precanvas.clientWidth / (editor.value.precanvas.clientWidth * editor.value.zoom)));\n  pos_y = pos_y * ( editor.value.precanvas.clientHeight / (editor.value.precanvas.clientHeight * editor.value.zoom)) - (editor.value.precanvas.getBoundingClientRect().y * ( editor.value.precanvas.clientHeight / (editor.value.precanvas.clientHeight * editor.value.zoom)));\n\n  const nodeSelected = listNodes.find(ele => ele.item == name);\n  editor.value.addNode(name, nodeSelected.input,  nodeSelected.output, pos_x, pos_y, name, {}, name, 'vue');\n}\n\n\nonMounted(() => {\n    const id = document.getElementById(\"drawflow\");\n    editor.value = new Drawflow(id, Vue, instance.appContext.app._context);\n    editor.value.start();\n\n    editor.value.registerNode('number', NodeNumber);\n    editor.value.addNode('github', 0, 1, 10, 10, 'github', {}, 'number', 'vue');\n});\n</script>\n\n<style scoped>\n#drawflow {\n  width: 100%;\n  height: 100%;\n  text-align: initial;\n  background-size: 20px 20px;\n  background-image: radial-gradient(#bebebe 1px, transparent 1px);\n}\n</style>"]},"metadata":{},"sourceType":"module"}